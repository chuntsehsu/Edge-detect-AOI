model = Sequential()
model.add(layers.BatchNormalization(axis=-1))
model.add(layers.Conv2D(32, (3,3))) 
model.add(layers.Activation('relu'))
model.add(layers.BatchNormalization(axis=-1)) 


model.add(layers.MaxPooling2D(pool_size=(2,2)))
model.add(Conv2D(64,(3, 3)))
model.add(layers.Activation('relu'))

model.add(layers.Conv2D(64, (1, 1))) 
model.add(layers.BatchNormalization(axis=-1))
model.add(layers.Activation('relu'))
model.add(layers.MaxPooling2D(pool_size=(2,2)))


model.add(layers.Flatten())
model.add(layers.Dense(64)) 
model.add(layers.BatchNormalization(axis=-1))
model.add(layers.Activation('relu'))
model.add(layers.Dropout(0.5))
model.add(layers.Flatten())
model.add(layers.Dense(6))
model.add(layers.Activation('softmax'))

model.compile(optimizer='adam',loss='categorical_crossentropy',metrics='accuracy')
callback_list=[model_checkpoint, early_stopping, lr_schedule]

print('------------------------------------------------------------------------')

history = model.fit(train,
            batch_size = 256,
            epochs = 128,
            validation_data=val,
            callbacks = callback_list)
