model = Sequential()
model.add(layers.BatchNormalization(axis=-1))
model.add(layers.Conv2D(32, (3,3))) 
model.add(layers.Activation('relu'))
model.add(layers.BatchNormalization(axis=-1)) ##


model.add(layers.MaxPooling2D(pool_size=(2,2)))
model.add(Conv2D(64,(3, 3)))
model.add(layers.Activation('relu'))

model.add(layers.Conv2D(64, (1, 1))) #64
model.add(layers.BatchNormalization(axis=-1))
model.add(layers.Activation('relu'))
model.add(layers.MaxPooling2D(pool_size=(2,2)))


model.add(layers.Flatten())
model.add(layers.Dense(64)) #512 #200 #100
model.add(layers.BatchNormalization(axis=-1))
model.add(layers.Activation('relu'))
model.add(layers.Dropout(0.5))
model.add(layers.Flatten())
model.add(layers.Dense(6))
model.add(layers.Activation('softmax'))

y_or = tf.keras.utils.to_categorical(y,6,dtype='float16')
x_or = [i for i in x]

def load_and_preprocess_image(path,label):
  image = tf.io.read_file(path)
  image = tf.image.decode_png(image, channels=1)
  image = tf.image.resize(image,target_size)
  image = tf.image.convert_image_dtype(image, dtype=tf.float16)
  image = tf.image.random_flip_up_down(image,)
  image = tf.image.random_flip_left_right(image)
  image /= 255.
  return image,label

test = tf.data.Dataset.from_tensor_slices((x_or,y_or))
test = test.map(load_and_preprocess_image, num_parallel_calls=AUTOTUNE)
test = test.batch(batch_size)
test = test.prefetch(buffer_size=AUTOTUNE)

model.compile(optimizer='adam',loss='categorical_crossentropy',metrics='accuracy')
callback_list=[model_checkpoint, early_stopping, lr_schedule]

print('------------------------------------------------------------------------')

history = model.fit(train,
            batch_size = 256,
            epochs = 128,
            validation_data=val,
            callbacks = callback_list)
